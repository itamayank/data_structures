package mayank.BinaryTree;

public class CheckBalancedBinaryTree {
	static class Node  
	{ 
	    int data; 
	    Node left, right; 
	    Node(int d)  
	    { 
	        data = d; 
	        left = right = null; 
	    } 
	} 
	    Node root; 
	   
	    //get the height of left and right subtrees. Return true if difference between heights is not more than 1
	    
	    //to convert normal bst into balanced bst , store bst in [] in inorder way and construct bst recursively
	    
	    //below is the commented code

	    boolean isBalanced(Node node)  
	    { 
	        int lh; 
	   
	        int rh;
	   
	        if (node == null) 
	            return true; 
	   
	        lh = height(node.left); 
	        rh = height(node.right); 
	   
	        if (Math.abs(lh - rh) <= 1
	                && isBalanced(node.left) 
	                && isBalanced(node.right))  
	            return true; 
	   
	        return false; 
	    } 
	    int height(Node node)  
	    { 
	        if (node == null) 
	            return 0; 
	   
	        return 1 + Math.max(height(node.left), height(node.right)); 
	    } 
	   
	    public static void main(String args[])  
	    { 
	        CheckBalancedBinaryTree tree = new CheckBalancedBinaryTree(); 
	        tree.root = new Node(1); 
	        tree.root.left = new Node(2); 
	        tree.root.right = new Node(3); 
	        tree.root.left.left = new Node(4); 
	        tree.root.left.right = new Node(5); 
	        tree.root.left.left.left = new Node(8); 
	   
	        if(tree.isBalanced(tree.root)) 
	            System.out.println("Tree is balanced"); 
	        else
	            System.out.println("Tree is not balanced"); 
	    } 
}


		/*storeBSTNodes(root.left, nodes); 
		        nodes.add(root); 
		        storeBSTNodes(root.right, nodes); 
		    } 
		  
		    Node buildTreeUtil(Vector<Node> nodes, int start, 
		            int end)  
		    { 
		        // base case 
		        if (start > end) 
		            return null; 
		  
		        int mid = (start + end) / 2; 
		        Node node = nodes.get(mid); 
		       
		        node.left = buildTreeUtil(nodes, start, mid - 1); 
		        node.right = buildTreeUtil(nodes, mid + 1, end); 
		  
		        return node; 
		    }*/
