package mayank.Array.dp;

public class PartitionProblem {
	
/*Partition problem is to determine whether a given set can be partitioned
into two subsets such that the sum of elements in both subsets is same.
			arr[] = {1, 5, 11, 5}
			Output: true 
The array can be partitioned as {1, 5, 5} and {11}
*/

	 static boolean findPartitiondp (int arr[], int n) 
	    { 
	        int sum = 0; 
	  
	        for (int i = 0; i < n; i++) 
	            sum += arr[i]; 
	  
	        if (sum%2 != 0) 
	            return false; 
	  
	        boolean dp[][]=new boolean[n+1][sum/2+1];                    //tc // sc //   O(sum*n)
	  
	        for (int i = 0; i <= n; i++) 
	            dp[i][0] = true; 
	      
	        for (int i = 1; i <= sum/2; i++) 
	            dp[0][i] = false; 
	      
	        for (int i = 1; i <= n; i++) 
	        { 
	            for (int j = 1; j <= sum/2; j++) 
	            { 
	                dp[i][j] = dp[i - 1][j]; 
	      
	                if (arr[i - 1] <= j) 
	                    dp[i][j] |= dp[i - 1][j - arr[i - 1]]; 
	            } 
	        }
	  
	        return dp[n][sum/2]; 
	    } 
	  
	    static boolean isSubsetSum (int arr[], int n, int sum) 
	    { 
	        if (sum == 0) 
	            return true; 
	        if (n == 0 && sum != 0) 
	            return false; 
	  
	        if (arr[n-1] > sum) 
	            return isSubsetSum (arr, n-1, sum); 
	  
	        return isSubsetSum (arr, n-1, sum) || 
	               isSubsetSum (arr, n-1, sum-arr[n-1]); 
	    } 
	    static boolean findPartition (int arr[], int n) 
	    { 
	        int sum = 0; 
	        for (int i = 0; i < n; i++) 
	            sum += arr[i]; 
	  
	        if (sum%2 != 0) 
	            return false; 
	  
	        return isSubsetSum (arr, n, sum/2); 
	    } 
	  
	    public static void main (String[] args) 
	    { 
	  
	        int arr[] = {3, 1,7,5}; 
	        int n = arr.length; 
	        if (findPartition(arr, n) == true) 
	            System.out.println("Can be divided into two "+ 
	                                "subsets of equal sum"); 
	        else
	            System.out.println("Can not be divided into " + 
	                                "two subsets of equal sum"); 
	        
	        if (findPartitiondp(arr, n) == true) 
	            System.out.println("Can be divided into two "+ 
	                                "subsets of equal sum"); 
	        else
	            System.out.println("Can not be divided into " + 
	                                "two subsets of equal sum"); 
	    } 

}
