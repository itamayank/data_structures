// stepping number is a number whose adjacent elements diff is 1
/**
 * 
 */
package mayank.Array;

import java.util.LinkedList;
import java.util.Queue;

/**
 * @author Mayank
 *
 */
public class SteppingNumber {
	
	                      //BFS
	
	public static void bfs(int n, int m, int num) {
		
		Queue<Integer> q = new LinkedList<Integer>();               // tc O(logn)

		q.add(num);

		while (!q.isEmpty()) {
			int stepNum = q.poll();

			if (stepNum <= m && stepNum >= n) {
				System.out.print(stepNum + " ");
			}

			if (stepNum == 0 || stepNum > m)
				continue;

			int lastDigit = stepNum % 10;

			int stepNumA = stepNum * 10 + (lastDigit - 1);
			int stepNumB = stepNum * 10 + (lastDigit + 1);

			if (lastDigit == 0)
				q.add(stepNumB);

			else if (lastDigit == 9)
				q.add(stepNumA);

			else {
				q.add(stepNumA);
				q.add(stepNumB);
			}
		}
	}

	public static void displaySteppingNumbers(int n, int m) {
		for (int i = 0; i <= 9; i++)
			bfs(n, m, i);
	}

	public static void main(String args[]) {
		int n = 10, m = 200;

		displaySteppingNumbers(n, m);
	}

	/*
	 * public static void main(String[] args) {
	 * 
	 * int a =9999; int total_number =0; for(int i=11;i<a;i++) { String s =
	 * String.valueOf(i); int len = s.length(); int count=1; for(int
	 * j=0;j<len-1;j++) { if(s.charAt(j)-s.charAt(j+1)==1 ||
	 * s.charAt(j)-s.charAt(j+1)==-1) { count++; } }if(count==len) {
	 * System.out.println(s); total_number++; }
	 * 
	 * }System.out.println("Total number - "+total_number);
	 * 
	 * }
	 */
}
