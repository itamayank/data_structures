
	/*A SumTree is a Binary Tree where the value of a node is equal to sum
	 *  of the nodes present in its left subtree and right subtree*/

package mayank.BinaryTree;

/**
 * @author Mayank
 *
 */
public class CheckSumTree {                //

	Node root;
	static class Node  
	{ 
	    int data; 
	    Node left, right, nextRight; 
	   
	    Node(int item)  
	    { 
	        data = item; 
	        left = right = nextRight = null; 
	    } 
	} 
	
	    int isLeaf(Node node)  
	    { 
	        if (node == null) 
	            return 0; 
	        if (node.left == null && node.right == null) 
	            return 1; 
	        return 0; 
	    } 
	    int isSumTree(Node node)  
	    { 
	        int ls; // for sum of nodes in left subtree 
	        int rs; // for sum of nodes in right subtree 
	   
	        if (node == null || isLeaf(node) == 1) 
	            return 1; 
	   
	        if (isSumTree(node.left) != 0 && isSumTree(node.right) != 0)  
	        { 
	            if (node.left == null) 
	                ls = 0; 
	            else if (isLeaf(node.left) != 0) 
	                ls = node.left.data; 
	            else
	                ls = 2 * (node.left.data); 
	   
	            if (node.right == null) 
	                rs = 0; 
	            else if (isLeaf(node.right) != 0) 
	                rs = node.right.data; 
	            else
	                rs = 2 * (node.right.data); 
	               
	            if ((node.data == rs + ls)) 
	                return 1; 
	            else
	                return 0; 
	        } 
	        return 0; 
	    } 
	    public static void main(String args[])  
	    { 
	        CheckSumTree tree = new CheckSumTree(); 
	        tree.root = new Node(26); 
	        tree.root.left = new Node(10); 
	        tree.root.right = new Node(3); 
	        tree.root.left.left = new Node(4); 
	        tree.root.left.right = new Node(6); 
	        tree.root.right.right = new Node(3); 
	   
	        if (tree.isSumTree(tree.root) != 0) 
	            System.out.println("The given tree is a sum tree"); 
	        else
	            System.out.println("The given tree is not a sum tree"); 
	    }
	    
	    
	    /*
	      int sum(Node node)  
    { 
        if (node == null) 
            return 0; 
        return sum(node.left) + node.data + sum(node.right); 
    } 
	     *  int isSumTree(Node node)   
    { 
        int ls, rs; 
   
        if ((node == null) || (node.left == null && node.right == null)) 
            return 1; 
   
        ls = sum(node.left); 
        rs = sum(node.right); 
   
        if ((node.data == ls + rs) && (isSumTree(node.left) != 0) 
                && (isSumTree(node.right)) != 0) 
            return 1; 
   
        return 0; 
    } */
	    
}
