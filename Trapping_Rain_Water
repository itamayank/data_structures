Given n non-negative integers representing an elevation map where the width of each bar is 1,
compute how much water it is able to trap after raining.

Input: arr[]   = {2, 0, 2}
Output: 2
Structure is like below
| |
|_|
We can trap 2 units of water in the middle gap.


package mayank.Array.dp;

public class TrappingWater {

	static int trap(int arr[],int n) {
	int res=0,lo=0,hi=n-1;
	int left_max=0,right_max=0;
	
	while(lo<=hi) {
		if(arr[lo]<arr[hi]) {
			if(left_max<arr[lo]) {
				left_max = arr[lo];
			}else {
				res += left_max-arr[lo];
				lo++;
			}
		}else {
			if(right_max <arr[hi]) {
				right_max = arr[hi];
			}
			else {
				res += right_max -arr[hi];
				hi--;
				}
		}
	}
		return res;	
	}
	static int trap2(int arr[],int n) {
		int res = 0;
		int left[] = new int[n];
		int right[]= new int[n];
		
		left[0]=arr[0];
		for(int i=1;i<n;i++) {
			left[i]= Math.max(left[i-1], arr[i]);
		}
		right[n-1] = arr[n-1];
		for(int i=n-2;i>=0;i--) {
			right[i]=Math.max(right[i+1], arr[i]);
		}
		for(int i =0;i<n;i++) {
			res += Math.min(left[i], right[i]) - arr[i];
		}
		return res;
	}
	
	public static void main(String[] args) {
   
		int arr[] = {3,0,0,6,0,0};
		int n = arr.length;
		System.out.println(trap(arr, n));
		System.out.println(trap2(arr, n));
		
		
	}

}
