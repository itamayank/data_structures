package mayank.Array.dp;

import java.util.Arrays;
import java.util.Collections;

public class MaxSumIncreasingSubsequence {
	
	
	static int maxSumIS(int arr[], int n) 
	 { 
	        int i, j; 
	        int dp[] = new int[n]; 
	  
	        for (i = 0; i < n; i++) 
	            dp[i] = arr[i]; 
	  
	        for (i = 1; i < n; i++) 
	            for (j = 0; j < i; j++) 
	                if (arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) 
	                    dp[i] = dp[j] + arr[i]; 
	  
	        
	        return dp[n-2]; 
	    } 
	
	public static void main(String[] args) {
		int arr[] = {1,102,2,3,4,101,103,4};
		int n = arr.length;
		Integer a[]= new Integer[n];
		a[0] = arr[0];
		for(int i=1;i<n;i++) {
			a[i] = arr[i];
			for(int j=i-1;j>=0;j--) {
				if(arr[i]>arr[j]) {
					a[i] = Math.max(a[i], a[j]+arr[i]);
				}
			}
		}System.out.println(Collections.max(Arrays.asList(a)));
		System.out.println(maxSumIS(arr,n));
	}
	
	

/*
        public static void main(String[] args) {
         //int[] number={1, 5,101, 2, 3,4,5, 100, 4, 5,105,6,7};
         //int[] number={23,25,1, 4, 5, 10,12,15,20};
        int[] number={3, 4, 8, 2, 100, 50, 5, 500};//615//3 4 8 100 500
         //int[] number={10, 5, 4, 3};
         //int[] number={3, 4, 5, 10};
             int k =0,index =0,finalSum = 0;
           int sum =0;
             while(k!=number.length){
                 int secondSum=number[0];
                 int previousNmber=number[0];
                 int otherPreviousNmber = number[0];
                 Boolean booleanVar=false;
                 if(k>0){
                       index++;                                               //longest maximum increasing subsequence
                 }

             for(int i=index;i<number.length;i++){
                 if(!booleanVar && (number[i] > sum || number[i] > previousNmber)){
                     sum = sum + number[i];
                     previousNmber = number[i];
                 }else{
                     if(number[i] > number[0] && number[i] > otherPreviousNmber){
                     secondSum =secondSum + number[i];
                     otherPreviousNmber = number[i];
                     }
                     if(secondSum > sum){
                         booleanVar=true;
                         }
                 }
         }   k++;
             sum = secondSum > sum ? secondSum : sum;
             if(finalSum < sum){
             finalSum = sum;
             }
             sum = 0;
             }
             System.out.println("maximum sum of increasing subsequences :" +finalSum);
     }*/

/*
     public static void main(String[] args) {
    // int[] number={1, 5,101, 2, 3,4,5, 100, 4, 5,105,6,7};
    //int[] number={3, 4, 8, 2, 100, 50, 5, 500};//615//3 4 8 100 500
     int[] number={1,101, 5, 4,100,3};
    //int[] number={23,25,1, 4, 5, 10,12,15,20};
     int index = 0;
     Boolean check = false;
     int sum = 0,k=0,m=0;
     int value =0 , previousValue = 0;
     int finalSum = 0;

      while(m!=number.length){
             k=m;
             if(m>0){
                 index++;
              }
             while(k!=number.length){
                 sum = sum + number[index];
                 previousValue = number[index];
                 for(int i=k+1;i<number.length;i++){ //longest maximum increasing subsequence
                 value = number[i];
                 if(value > previousValue){
                     sum = sum + number[i];
                     previousValue = number[i];
                    }
                 }
                 if(sum>finalSum){
                 finalSum = sum;
                 }
                 k++;
                 sum = 0;
                 previousValue = 0;
             }
             k=0;
             m++;
               }
          System.out.println(finalSum);
             }

*/
	
}
