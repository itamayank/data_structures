/**
 * 
 */
package mayank.String;

/**
 * @author Mayank
 *
 */
public class AnagramSubstringSearch {
		
	static final int MAX = 256; 
		
		static boolean compare(char arr1[], char arr2[]) 
		{ 
			for (int i = 0; i < MAX; i++) 
				if (arr1[i] != arr2[i]) 
					return false; 
			return true; 
		} 
		static void search(String pat, String txt) 
		{ 
			int M = pat.length(); 
			int N = txt.length(); 

			char[] countP = new char[MAX]; 
			char[] countTW = new char[MAX]; 
			for (int i = 0; i < M; i++)                          //tc O(n)
			{ 
				(countP[pat.charAt(i)])++; 
				(countTW[txt.charAt(i)])++; 
			} 

			for (int i = M; i < N; i++) 
			{ 
				if (compare(countP, countTW)) 
					System.out.println("Found at Index " + 
											(i - M)); 
				
				// Add current character to current  
	            // window
				(countTW[txt.charAt(i)])++;  

				// Remove the first character of previous 
	            // window
				countTW[txt.charAt(i-M)]--;
			} 
			
			// Check for the last window in text
			if (compare(countP, countTW)) 
				System.out.println("Found at Index " + 
										(N - M)); 
		} 
		public static void main(String args[]) 
		{ 
			String txt = "aabcbcdbca"; 
			String pat = "abcd"; 
			search(pat, txt); 
		} 
	} 

