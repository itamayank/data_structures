package mayank.Array;

import java.util.HashMap;

public class LargestSubarrayof01 {

	static void maxLen(int arr[], int n) {
		HashMap<Integer, Integer> hM = new HashMap<Integer, Integer>();

		int sum = 0;
		int max_len = 0;
		int ending_index = -1;

		for (int i = 0; i < n; i++) {
			arr[i] = (arr[i] == 0) ? -1 : 1;
		}
		for (int i = 0; i < n; i++) {
			sum += arr[i];

			if (sum == 0) {
				max_len = i + 1;
				ending_index = i;
			}

			if (hM.containsKey(sum)) {
				if (max_len < i - hM.get(sum)) {
					max_len = i - hM.get(sum);
					ending_index = i;
				}
			} else
				hM.put(sum, i);
		}

		for (int i = 0; i < n; i++) {                 // best complexity code
			arr[i] = (arr[i] == -1) ? 0 : 1;
		}
		int end = ending_index - max_len + 1;
		System.out.println(end + " to " + ending_index);

	}

	public static void main(String[] args) {

		int arr[] = {0,0,0,1,1,1,0}; 
		maxLen(arr, arr.length);

		/*
		 * int count0=0; int count1=0; int maxdiff=0; int si=0,ei=0; for(int
		 * i=0;i<arr.length;i++) { if(arr[i]==0) { count0 = 1; }else { count1 = 1; }
		 * for(int j=i+1;j<arr.length;j++) { if(arr[j]==0) { count0++; }else { count1++;
		 * } if(count0 == count1) { if((j-i)>maxdiff) { maxdiff = (j-i); si = i; ei = j;
		 * } } }count1=0; count0=0; }System.out.println(si+" - "+ei);
		 */
	}

}
