package mayank.String;

public class LongestPrefixSuffix {
		
	
	//Since overlapping of prefix and suffix is not allowed, 
	 //we break the string from middle and start matching left and right string
	 //If they are equal return size of any one string else try for shorter lengths on both sides.
	
	  static int longestPrefixSuffix1(String s)  
	    { 
	    int n = s.length(); 
	    
	    if(n < 2) { 
	        return 0; 
	    } 
	  
	    int len = 0; 
	    int i = n/2; 
	    
	    while(i < n) { 
	        if(s.charAt(i) == s.charAt(len)) { 
	        ++len; 
	        ++i; 
	    }  
	    else 
	    { 
	      if(len == 0) { // no prefix 
	        ++i; 
	      }  
	      else 
	      {  
	        // search for shorter prefixes 
	        --len; 
	      } 
	    } 
	  } 
	    
	  return len; 
	          
	} 
	
	static int longestPrefixSuffix(String s) 
		{ 
			int n = s.length(); 
			int lps[] = new int[n]; 
			lps[0] = 0; 
			                         //kmp
			int len = 0; 
			int i = 1; 
			
			while (i < n) { 
				if (s.charAt(i) == s.charAt(len)) 
				{ 
					len++; 
					lps[i] = len; 
					i++; 
				} 
				else
				{ 
					if (len != 0) 
					{ 
						len = lps[len-1]; 
		
					} 
					else
					{ 
						lps[i] = 0; 
						i++; 
					} 
				} 
			} 
			int res = lps[n-1]; 
		
			// Since we are looking for 
			// non overlapping parts. 
			return (res > n/2)? n/2 : res; 
		} 
		public static void main (String[] args) 
		{ 
			String s = "abcab"; 
			System.out.println(longestPrefixSuffix(s)); 
		} 
	} 

