package mayank.BinaryTree;

class Node {
	int data;
	Node left , right;
	
	public Node (int item) {
		data = item;
		left = right = null;
	}
}
public class BST {
   
	Node root;
	
	boolean isBST() {
		return isBSTUtil(root, Integer.MIN_VALUE,Integer.MAX_VALUE);
			}
	
	boolean isBSTUtil(Node node , int min ,int max) {
		if(node == null) {
			return true;
	}
		if(node.data < min || node.data > max) {
			return false;
		}
		return ( isBSTUtil (node.left , min , node.data-1) && isBSTUtil (node.right , node.data-1  , max));
				}
		
	Node prev;
	 boolean isBST(Node node) 
	    { 
	        // traverse the tree in inorder fashion and 
	        // keep a track of previous node 
	        if (node != null) 
	        { 
	            if (!isBST(node.left)) 
	                return false; 
	  
	            // allows only distinct values node 
	            if (prev != null && node.data <= prev.data ) 
	                return false; 
	            prev = node; 
	            return isBST(node.right); 
	        } 
	        return true; 
	    } 
	
	public static void main(String[] args) {
		
		BST tree = new BST();
		tree.root = new Node(4);
		tree.root.left = new Node(2);
		tree.root.right = new Node(5);
		 tree.root.left.left = new Node(1);
	        tree.root.left.right = new Node(3);
	 
	        if (tree.isBST())
	            System.out.println("IS BST");
	        else
	            System.out.println("Not a BST");	
	        
	        if (tree.isBST(tree.root))
	            System.out.println("IS BST");
	        else
	            System.out.println("Not a BST");	
	    }
	
}
