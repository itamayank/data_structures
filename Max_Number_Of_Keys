	// A Dynamic Programming based Java program 
	// to find maximum number of A's that 
	// can be printed using four keys 
	
	/*Imagine you have a special keyboard with the following keys: 
Key 1:  Prints 'A' on screen
Key 2: (Ctrl-A): Select screen
Key 3: (Ctrl-C): Copy selection to buffer
Key 4: (Ctrl-V): Print buffer on screen appending it
                 after what has already been printed. 

If you can only press the keyboard for N times (with the above four
keys), write a program to produce maximum numbers of A's. That is to
say, the input parameter is N (No. of keys that you can press), the 
output is M (No. of As that you can produce).*/

package mayank.Array;

public class MaxNumberOfKeys {
	
	static int findoptimal(int N) 
	{ 
		if (N <= 6) 
			return N; 

		int []screen = new int[N]; 

		int b; // To pick a breakpoint 

		int n; 
		for (n = 1; n <= 6; n++) 
			screen[n - 1] = n; 

		for (n = 7; n <= N; n++) 
		{ 

			screen[n - 1] = Math.max(2 * screen[n - 4], 
							Math.max(3 * screen[n - 5], 
									4 * screen[n - 6])); 
		} 
		return screen[N - 1]; 
	} 

	public static void main(String[] args) 
	{ 
		int N; 

		for (N = 1; N <= 20; N++) 
			System.out.printf("Maximum Number of A's with" + 
								" %d keystrokes is %d\n", 
										N, findoptimal(N)); 
		} 
	} 

