package mayank.BinaryTree;

import java.util.Vector;

public class PrintPathBetweenTwoNode {
	// Java program to print path between any 
	// two nodes in a Binary Tree 
	static class Node { 
		int data; 
		Node left, right; 
	} 

	static Node getNode(int data) 
	{ 
		Node newNode = new Node(); 
		newNode.data = data; 
		newNode.left = newNode.right = null; 
		return newNode; 
	} 

	static boolean getPath(Node root, Vector<Integer> arr, int x) 
	{ 
		if (root==null) 
			return false; 

		arr.add(root.data); 

		if (root.data == x) 
			return true; 

		if (getPath(root.left, arr, x) || getPath(root.right, arr, x)) 
			return true; 

		arr.remove(arr.size()-1); 
		return false; 
	} 

	static void printPathBetweenNodes(Node root, int n1, int n2) 
	{ 
		Vector<Integer> path1= new Vector<Integer>(); 

		// vector to store the path of 
		// second node n2 from root 
		Vector<Integer> path2=new Vector<Integer>(); 

		getPath(root, path1, n1); 
		getPath(root, path2, n2); 

		int intersection = -1; 

		// Get intersection point 
		int i = 0, j = 0; 
		while (i != path1.size() || j != path2.size()) { 

			// Keep moving forward until no intersection 
			// is found 
			if (i == j && path1.get(i) == path2.get(i)) { 
				i++; 
				j++; 
			} 
			else { 
				intersection = j - 1; 
				break; 
			} 
		} 

		// Print the required path 
		for ( i = path1.size() - 1; i > intersection; i--) 
			System.out.print( path1.get(i) + " "); 

		for ( i = intersection; i < path2.size(); i++) 
			System.out.print( path2.get(i) + " "); 
	} 

	// Driver program 
	public static void main(String[] args) 
	{ 
		// binary tree formation 
		Node root = getNode(0); 
		root.left = getNode(1); 
		root.left.left = getNode(3); 
		root.left.left.left = getNode(7); 
		root.left.right = getNode(4); 
		root.left.right.left = getNode(8); 
		root.left.right.right = getNode(9); 
		root.right = getNode(2); 
		root.right.left = getNode(5); 
		root.right.right = getNode(6); 

		int node1 = 7; 
		int node2 = 4; 
		printPathBetweenNodes(root, node1, node2); 

	} 
	} 
