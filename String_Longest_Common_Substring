package mayank.String;

import java.util.ArrayList;
import java.util.Collections;

public class LonggestCommonSubstring {
	public static void main(String[] args) {
	
		String str1 = "abcdxyz";
		String str2 = "xyzabcd";
		//boolean flg=false;
	    ArrayList<String> strList = new ArrayList<String>();
		int i;
		String checkString ="";
		for(i=0;i<str2.length();i++) {
			checkString += String.valueOf(str1.charAt(i));
			if(str2.contains(checkString)) {
				strList.add(checkString);
			}else{
				checkString =  String.valueOf(str1.charAt(i));
			}
		}
		System.out.println(Collections.max(strList));
		
		
		
						/*int lcs( char[] X, char[] Y, int m, int n ) 
				  { 
				    int L[][] = new int[m+1][n+1]; 
				  
				    for (int i=0; i<=m; i++) 
				    { 
				      for (int j=0; j<=n; j++) 
				      {                                  //longest common subsequence
				        if (i == 0 || j == 0) 
				            L[i][j] = 0; 
				        else if (X[i-1] == Y[j-1]) 
				            L[i][j] = L[i-1][j-1] + 1; 
				        else
				            L[i][j] = max(L[i-1][j], L[i][j-1]); 
				      } 
				    } 
				  return L[m][n]; 
				  } 
				  
				  int max(int a, int b) 
				  { 
				    return (a > b)? a : b; 
				  } */
		
}}
