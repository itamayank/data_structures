package mayank.BinaryTree;

public class FoldableTree {

	static class Node  
	{ 
	    int data; 
	    Node left, right; 
	   
	    Node(int item)  
	    { 
	        data = item; 
	        left = right = null; 
	    } 
	} 
	/*A tree can be folded if left and right subtrees of the tree are structure wise mirror image of each other.
	An empty tree is considered as foldable.*/
	   
	    Node root; 
	   
	    boolean IsFoldable(Node node)  
	    { 
	        if (node == null) 
	            return true; 
	   
	        return IsFoldableUtil(node.left, node.right); 
	    } 
	   
	    boolean IsFoldableUtil(Node n1, Node n2)  
	    { 
	        if (n1 == null && n2 == null) 
	            return true; 
	   
	        if (n1 == null || n2 == null) 
	            return false; 
	        
	        return IsFoldableUtil(n1.left, n2.right) 
	                && IsFoldableUtil(n1.right, n2.left); 
	    } 
	    public static void main(String args[]) { 
	        FoldableTree tree = new FoldableTree(); 
	          
	        /* The constructed binary tree is 
	             1 
	           /   \ 
	          2     3 
	           \    / 
	            4  5 
	        */
	        tree.root = new Node(1); 
	        tree.root.left = new Node(2); 
	        tree.root.right = new Node(3); 
	        tree.root.right.left = new Node(4); 
	        tree.root.left.right = new Node(5); 
	   
	        if (tree.IsFoldable(tree.root)) 
	            System.out.println("tree is foldable"); 
	        else
	            System.out.println("Tree is not foldable"); 
	   
	    } 
	   }
