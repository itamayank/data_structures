package mayank.Array.dp;

public class MaximumStolenAmount {

	
	/*There are n houses build in a line, 
	each of which contains some value in it.
	A thief is going to steal the maximal value of these houses, but he canâ€™t steal in two 
	adjacent houses because owner of the stolen houses will tell 
	his two neighbor left and right side. What is the maximum stolen value.
	*/
	
	static int maxNumber(int arr[], int n) {

		if(n==0) {
			return 0;
		}
		if(n==1) {
			return 1;                                     //tc //sc (O(n))
		}
		if(n==2) {
			return Math.max(arr[0], arr[1]);
		}
		int dp[] = new int[n];
		dp[0] = arr[0];
		dp[1] = arr[1];
		
		for(int i=2;i<n;i++) {
			dp[i] = Math.max(arr[i]+dp[i-2] ,dp[i-1]);
		}
		
		return dp[n-1];
	}
	
	static int maxLoot(int hval[], int n) 
    { 
        if (n == 0) 
        return 0; 
   
        int value1 = hval[0]; 
        if (n == 1) 
            return value1;                                    //tc(O(n)      sc (O(1))
   
        int value2 = Math.max(hval[0], hval[1]); 
        if (n == 2) 
            return value2; 
    
        int max_val = 0; 
   
        // Fill remaining positions 
        for (int i=2; i<n; i++) 
        { 
            max_val = Math.max(hval[i]+value1, value2); 
            value1 = value2; 
            value2 = max_val; 
        } 
   
        return max_val;
    }
	
	static void maxSum(int arr[],int len) {
		int first = arr[0] , second =0 , res = 0;
		
		for(int i=1;i<len;i++) {
			
			res = (first>second)?first:second;
			first = arr[i]+second;
			second = res;
			
		}
		System.out.println((first > second) ? first : second);
	}
	
	
	
	public static void main(String[] args) {
		int arr[] = {2,5,4,6,1,7,9};
		int n = arr.length;
		System.out.println("maximum number "+  maxNumber(arr, n));
		System.out.println("maximum number "+  maxLoot(arr, n));
		 maxSum(arr, n);
	}
}
