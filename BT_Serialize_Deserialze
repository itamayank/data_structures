package mayank.BinaryTree;

import java.util.ArrayList;
import java.util.LinkedList;


public class SerializeDeserializeBT {
	
	TreeNode root1;
	static class TreeNode{
		int val;
		TreeNode left,right;
		TreeNode(int d){
			val = d;
			left = right = null;
		}
	}

	static void inorder(TreeNode root) {
		if(root == null) {
			return;
		}
		inorder(root.left);                                            //inorder traversal (left-root-right)
		System.out.print(root.val+" ");
		inorder(root.right);
	}
	
	// Encodes a tree to a single string.
	public static String serialize(TreeNode root) {
	    ArrayList<String> list = new ArrayList<>();
	    LinkedList<TreeNode> q = new LinkedList<>();
	    q.offer(root);
	 
	    while (!q.isEmpty()) {
	        TreeNode h = q.poll();
	        if (h == null) {
	            list.add("#");
	        } else {
	            list.add("" + h.val);
	            q.offer(h.left);
	            q.offer(h.right);
	        }
	    }
	 
	    return String.join(",", list);
	}
	
	// Decodes your encoded data to tree.
	public TreeNode deserialize(String data) {
	    String[] arr = data.split(",");
	    if (arr[0].equals("#")) {
	        return null;
	    }
	 
	    TreeNode root = new TreeNode(Integer.parseInt(arr[0]));
	    LinkedList<TreeNode> q = new LinkedList<>();
	    q.offer(root);
	 
	    int i = 1;
	 
	    while (!q.isEmpty()) {
	        TreeNode h = q.poll();
	        if (h != null) {
	            TreeNode left = null;
	            if (!arr[i].equals("#")) {
	                left = new TreeNode(Integer.parseInt(arr[i]));
	            }
	            h.left = left;
	            q.offer(left);
	            i++;
	 
	            TreeNode right = null;
	            if (!arr[i].equals("#")) {
	                right = new TreeNode(Integer.parseInt(arr[i]));
	            }
	            h.right = right;
	            q.offer(right);
	            i++;
	        }
	    }
	 
	    return root;
	}
	public static void main(String[] args) {
		SerializeDeserializeBT tree = new SerializeDeserializeBT();
		tree.root1 = new TreeNode(1);
		tree.root1.left = new TreeNode(2);
		tree.root1.right = new TreeNode(3); 
		tree.root1.left.left = new TreeNode(4); 
		tree.root1.left.left.left = new TreeNode(5); 
		tree.root1.left.left.right= new TreeNode(6); 
		
		inorder(tree.root1);
        System.out.println();
		String data = tree.serialize(tree.root1);
		System.out.println(data);
		
		System.out.println();
		TreeNode node = tree.deserialize(data);
		inorder(node);
	}
}
