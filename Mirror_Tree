package mayank.BinaryTree;

public class CheckMirrorTrees {

	//Two Trees are said to be mirror of each other if nodes'key are same
	//and Left subtree of root of ‘a’ and right subtree root of ‘b’ are mirror.
	//and Right subtree of ‘a’ and left subtree of ‘b’ are mirror.

	Node tree1 , tree2;
	static class Node{
		int key;
		Node left , right;
		Node(int key){
			this.key =key;
			left = right = null;
		}
	}
	 boolean areMirror(Node Tree1 , Node Tree2) {
		if(tree1==null && Tree2 == null) {
			return true;
		}
		if(tree1==null || tree2==null) {
			return false;
		}
		return tree1.key == tree2.key 
				&& areMirror(tree1.left,tree2.right) 
				&& areMirror(tree1.right,tree2.left);
	}
	 
	public static void main(String[] args) {
		CheckMirrorTrees tree = new CheckMirrorTrees();
		    Node a = new Node(1); 
	        Node b = new Node(1); 
	        a.left = new Node(2); 
	        a.right = new Node(3); 
	        a.left.left = new Node(4); 
	        a.left.right = new Node(5); 
	  
	        b.left = new Node(3); 
	        b.right = new Node(2); 
	        b.right.left = new Node(5); 
	        b.right.right = new Node(4); 
	
	        if (tree.
	        		areMirror(a, b) == true) 
	            System.out.println("Yes"); 
	        else
	            System.out.println("No"); 
	}
	
}


	
