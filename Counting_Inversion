package mayank.Array;

public class CountingInversion {
	static int arr1[] = new int[] { 1, 20, 6, 4, 5 }; 
	  
	/*static int getInvCount(int arr[], int n) 
    { 
        int inv_count = 0;                            //bubble sort gives time complexity (O n2)
        for (int i = 0; i < n - 1; i++) 
            for (int j = i + 1; j < n; j++) 
                if (arr[i] > arr[j]) 
                    inv_count++; 
  
        return inv_count; 
    } 
   */
	
	static int mergeSort(int arr[], int array_size)                       //tc (O nlogn)
    { 
        int temp[] = new int[array_size];                          //have to do it with bst
        return _mergeSort(arr, temp, 0, array_size - 1); 
    } 
  
    static int _mergeSort(int arr[], int temp[], int left, int right) 
    { 
        int mid, inv_count = 0; 
        if (right > left) { 
           
        	mid = (right + left) / 2; 
  
            inv_count = _mergeSort(arr, temp, left, mid); 
            inv_count += _mergeSort(arr, temp, mid + 1, right); 
  
            inv_count += merge(arr, temp, left, mid + 1, right); 
        } 
        return inv_count; 
    } 
  
    static int merge(int arr[], int temp[], int left, int mid, int right) 
    { 
        int i, j, k; 
        int inv_count = 0; 
  
       
        i = left; /* i is index for left subarray*/
        j = mid; /* j is index for right subarray*/
        k = left; /* k is index for resultant merged subarray*/
        while ((i <= mid - 1) && (j <= right)) { 
            if (arr[i] <= arr[j]) { 
                temp[k++] = arr[i++]; 
            } 
            else { 
                temp[k++] = arr[j++]; 
  
                inv_count +=  (mid - i); 
            } 
        } 
  
        while (i <= mid - 1) 
            temp[k++] = arr[i++]; 
  
        while (j <= right) 
            temp[k++] = arr[j++]; 

        for (i = left; i <= right; i++) 
            arr[i] = temp[i]; 
  
        return inv_count; 
    } 
  
    public static void main(String[] args) 
    { 
        int arr[] = new int[] { 1, 20, 6, 4, 5,4,2,1,0 }; 
        //System.out.println(getInvCount(arr,arr.length));
        System.out.println("Number of inversions are " + mergeSort(arr, arr.length)); 
    } 
   /* public static void main(String[] args) 
    { 
        System.out.println("Number of inversions are "
                           + getInvCount(arr.length)); 
    } */
}
