package mayank.Array;

import java.util.Arrays;
import java.util.HashSet;

public class CountPairDiffEqualsK {
	static int countPairsWithDiffK(int arr[], int n, int k) {
		int count = 0;
		Arrays.sort(arr); 

		int l = 0;
		int r = n-1;
		while (l < r) {                                                // tc  - O nlogn,  sc O(1)
			if (arr[l] + arr[r] == k) {
				++count;
				l++;
				r--;
			} else if (arr[l] + arr[r] < k)
				l++;
			else 
				r--;
		}
		return count;
	}

	private static void countPairs(int[] arr, int n, int k) {
		
		HashSet<Integer> hs = new HashSet<>();
		for(int i = 0; i<n; i++) {
			hs.add(arr[i]);
			}
		
		for(int i = 0; i<n; i++) {                          // tc  - O n,  sc O(n)
			if(arr[i] > k) {
				int temp = k-arr[i];
				
				if(hs.contains(temp)) {
					System.out.println(temp+" "+arr[i]);
				}
			}else {
                   int temp = k+arr[i];
				
				if(hs.contains(temp)) {
					System.out.println(temp+" "+arr[i]);
				}
			}
		}
	}
	
	
	public static void main(String[] args) {
		int arr[] = { 1, 5, 3, 4, 2 };
		int arr2[] = { 1, 5, 3, 4, 2 };
		int n = arr.length;
		int k = 5;
		System.out.println("Count of pairs with given diff is " + countPairsWithDiffK(arr, n, k));
		
		countPairs(arr2,n,k);
	}
}
