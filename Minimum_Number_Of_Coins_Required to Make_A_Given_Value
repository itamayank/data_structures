Given a value V, if we want to make change for V cents, and we have infinite supply of each of C = { C1, C2, .. , Cm} valued coins,
what is the minimum number of coins to make the change?


Input: coins[] = {25, 10, 5}, V = 30
Output: Minimum 2 coins required
We can use one coin of 25 cents and one of 5 cents 

package mayank.Array.dp;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * @author Mayank
 *
 */
public class Coin2DP {

	// Input: coins[] = {25, 10, 5}, V = 30
	// Output: Minimum 2 coins required
	/// We can use one coin of 25 cents and one of 5 cents

	// we can also do this by greedy approach i.e find the greatest value smaller
	// than the number and their reduce its
	// value to its smaller values

	static int minNumbers(int x, int[] arr, int n) {
		// Queue for BFS
		Queue<Integer> q = new LinkedList<>();

		// Base value in queue
		q.add(x);

		// Boolean array to check if
		// a number has been visited before
		HashSet<Integer> v = new HashSet<Integer>();

		// Variable to store depth of BFS
		int d = 0;

		// BFS algorithm
		while (q.size() > 0) {

			// Size of queue
			int s = q.size();
			while (s-- > 0) {

				int c = q.peek();

				// Base case
				if (c == 0)
					return d;
				q.remove();

				if (v.contains(c) || c < 0)
					continue;

				// Setting current state as visited
				v.add(c);

				// Pushing the required states in queue
				for (int i = 0; i < n; i++)
					q.add(c - arr[i]);
			}
			d++;
		}

		// If no possible solution
		return -1;
	}

	static int minCoins(int coins[], int m, int V) {
		int table[] = new int[V + 1];
		table[0] = 0;

		for (int i = 1; i <= V; i++)
			table[i] = Integer.MAX_VALUE;
		                                                                                 // tc - O(mv)
		for (int i = 1; i <= V; i++) {       // V = coins 
			for (int j = 0; j < m; j++)           // m = coins.length()
				if (coins[j] <= i) {
					int sub_res = table[i - coins[j]];                                    // dp approach
					if (sub_res != Integer.MAX_VALUE && sub_res + 1 < table[i])
						table[i] = sub_res + 1;
				}
		}

		return table[V];
	}

	static void minCOins(int coins[], int sum) {

		List<Integer> list = new LinkedList<>(); // greedy approach
		Arrays.sort(coins);

		int n = coins.length - 1;

		for (int i = n; i >= 0; i--) {

			while (sum >= coins[i]) {
				sum -= coins[i];
				list.add(coins[i]);
			}
		}
		System.out.println(list);

	}

	public static void main(String[] args) {
		// int coins[] = {1, 2, 5, 10, 20, 50, 100, 500, 1000};
		int coins[] = { 25, 10, 5 };
		int m = coins.length;
		int V = 30;
		// minCOins(coins, V);
		System.out.println("Minimum coins required is " + minCoins(coins, m, V));
		System.out.println("Minimum coins required is " + minNumbers(V, coins, m));
	}

	static int minCoinsRec(int coins[], int m, int V) {
		if (V == 0)
			return 0;

		int res = Integer.MAX_VALUE;

		for (int i = 0; i < m; i++) {
			if (coins[i] <= V) {
				int sub_res = minCoins(coins, m, V - coins[i]);

				if (sub_res != Integer.MAX_VALUE && sub_res + 1 < res)
					res = sub_res + 1;
			}
		}
		return res;
	}
}
