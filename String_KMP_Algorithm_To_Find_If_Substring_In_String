package mayank.String;

//this is the best algorithm to find if a string contains value x;
//ex - String s = "HelloHi";
       String x = "ello";
       
       o/p = true; x found at index 1;

public class KMP {
		
	static void KMPSearch(String pat, String txt) 
		{ 
			int M = pat.length(); 
			int N = txt.length(); 

			int lps[] = new int[M]; 
			int j = 0; 

			computeLPSArray(pat, M, lps);                      

			int i = 0;
			while (i < N) { 
				if (pat.charAt(j) == txt.charAt(i)) { 
					j++; 
					i++; 
				} 
				if (j == M) { 
					System.out.println("Found pattern "
									+ "at index " + (i - j)); 
					j = lps[j - 1]; 
				} 

				else if (i < N && pat.charAt(j) != txt.charAt(i)) { 
					
					if (j != 0) 
						j = lps[j - 1]; 
					else
						i = i + 1; 
				} 
			} 
		} 

		static void computeLPSArray(String pat, int M, int lps[]) 
		{ 
			int len = 0; 
			int i = 1; 
			lps[0] = 0;                                           //longest prefix suffix

			while (i < M) { 
				if (pat.charAt(i) == pat.charAt(len)) { 
					len++; 
					lps[i] = len; 
					i++; 
				} 
				else 
				{ 
					if (len != 0) { 
						len = lps[len - 1]; 
					} 
					else // if (len == 0) 
					{ 
						lps[i] = len; 
						i++; 
					} 
				} 
			} 
		} 
		public static int strstr(String X, String Y)
	    {
	        // Base Case 1: Y is null or empty
	        if (Y == null || Y.length() == 0) {
	            return 0;
	        }
	 
	        // Base Case 2: X is null or X's length is less than that of Y's
	        if (X == null || Y.length() > X.length()) {
	            return -1;
	        }
	 
	        char[] chars = Y.toCharArray();
	 
	        // next[i] stores the index of next best partial match
	        int[] next = new int[Y.length() + 1];
	        for (int i = 1; i < Y.length(); i++)
	        {
	            int j = next[i + 1];
	 
	            while (j > 0 && chars[j] != chars[i]) {
	                j = next[j];
	            }
	 
	            if (j > 0 || chars[j] == chars[i]) {
	                next[i + 1] = j + 1;
	            }
	        }
	 
	        for (int i = 0, j = 0; i < X.length(); i++)
	        {
	            if (j < Y.length() && X.charAt(i) == Y.charAt(j))
	            {
	                if (++j == Y.length()) {
	                    return (i - j + 1);
	                }
	            }
	            else if (j > 0)
	            {
	                j = next[j];
	                i--;    // as i will be incremented in next iteration
	            }
	        }
	 
	        return -1;
	    }
	 
		
		// Driver program to test above function 
		public static void main(String args[]) 
		{ 
			String txt = "AAACAAAA"; 
			String pat = "AAA"; 
		   KMPSearch(pat, txt); 
		   System.out.println("12313");
		   System.out.println(strstr(txt, pat));
		} 
}
