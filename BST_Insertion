package mayank.BinaryTree;

public class InsertInBST {

	
	
	// A utility function to search a given key in BST 
	public Node search(Node root, int key) 
	{ 
	    if (root==null || root.key==key) 
	        return root; 
	  
	    if (root.key > key) 
	        return search(root.left, key); 
	  
	    return search(root.right, key); 
	} 
	
		class Node { 
			int key; 
			Node left, right; 

			public Node(int item) { 
				key = item; 
				left = right = null; 
			} 
		} 

		Node root; 

		// Constructor 
		InsertInBST() { 
			root = null; 
		} 

		// This method mainly calls insertRec() 
		void insert(int key) { 
		root = insertRec(root, key); 
		} 
		
		/* A recursive function to insert a new key in BST */
		Node insertRec(Node root, int key) { 

			if (root == null) { 
				root = new Node(key); 
				return root; 
			} 

			if (key < root.key) 
				root.left = insertRec(root.left, key); 
			else if (key > root.key) 
				root.right = insertRec(root.right, key); 

			return root; 
		} 

		// This method mainly calls InorderRec() 
		void inorder() { 
		inorderRec(root); 
		} 

		void inorderRec(Node root) { 
			if (root != null) { 
				inorderRec(root.left); 
				System.out.println(root.key); 
				inorderRec(root.right); 
			} 
		} 

		// Driver Program to test above functions 
		public static void main(String[] args) { 
			InsertInBST tree = new InsertInBST(); 

			/* Let us create following BST 
				50 
			/	 \ 
			30	 70 
			/ \ / \ 
		20 40 60 80 */
			tree.insert(50); 
			tree.insert(30); 
			tree.insert(20); 
			tree.insert(40); 
			tree.insert(70); 
			tree.insert(60); 
			tree.insert(80); 

			tree.inorder(); 
		} 
}
