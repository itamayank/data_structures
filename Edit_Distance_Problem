	//Given two strings str1 and str2 and below operations that can performed on str1. 
	//Find minimum number of edits (operations) required to convert ‘str1’ into ‘str2’.


package mayank.Array.dp;

/**
 * @author Mayank
 *
 */
public class EditDistnceDP {

	/*Insert
	Remove
	Replace*/
	
	static int min(int x,int y,int z) 
    { 
        if (x <= y && x <= z) return x; 
        if (y <= x && y <= z) return y; 
        else return z; 
    } 
  
    static int editDistDP(String str1, String str2, int m, int n) 
    { 
        int dp[][] = new int[m+1][n+1]; 
       
        for (int i=0; i<=m; i++) 
        { 
            for (int j=0; j<=n; j++) 
            { 
                // If first string is empty, only option is to         //tc (O mn)
                // insert all characters of second string 
                if (i==0) 
                    dp[i][j] = j;  
       
                else if (j==0) 
                    dp[i][j] = i; 
       
                // If last characters are same, ignore last char 
                // and recur for remaining string 
                else if (str1.charAt(i-1) == str2.charAt(j-1)) 
                    dp[i][j] = dp[i-1][j-1]; 
       
                // If the last character is different, consider all 
                // possibilities and find the minimum 
                else
                    dp[i][j] = 1 + min(dp[i][j-1],  // Insert 
                                       dp[i-1][j],  // Remove 
                                       dp[i-1][j-1]); // Replace 
            } 
        } 
   
        return dp[m][n]; 
    } 
  
      
  
    public static void main(String args[]) 
    { 
        String str1 = "saturday"; 
        String str2 = "sunday"; 
        System.out.println( editDistDP( str1 , str2 , str1.length(), str2.length()) ); 
    } 
}
