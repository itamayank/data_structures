Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins,
how many ways can we make the change? The order of coins doesnâ€™t matter.
For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4.

/**
 * 
 */
package mayank.Array.dp;

/**
 * @author Mayank
 *
 */
public class CoinChangeDP {
	
	//1- modulus and division method 
	
	// for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. 

    static long countWays(int S[], int m, int n) 
    {                                                       //dynamic programming
        long[] table = new long[n+1]; 
  
        table[0] = 1;                                        //tc - O(mn) sc - O(n)
     
        // Pick all coins one by one and update the table[] 
        // values after the index greater than or equal to 
        // the value of the picked coin
        
        for (int i=0; i<m; i++)                      // m = arr.length
            for (int j=S[i]; j<=n; j++)                  // n = sum
                table[j] +=  table[j-S[i]]; 
  
        return table[n]; 
    } 
    
    
    static int count( int S[], int m, int n ) 
    { 
        if (n == 0) 
            return 1; 
          
        if (n < 0) 
            return 0; 
      
        if (m <=0 && n >= 1)                    //recursive solution
            return 0; 
      
        return count( S, m - 1, n ) + 
               count( S, m, n-S[m-1] ); 
    } 
   
    	public static void main(String args[]) 
    { 
        int arr[] = {1,2,3}; 
        int m = arr.length; 
        int n = 4; 
       // System.out.println(4%3);
        System.out.println(countWays(arr, m, n)); 
        System.out.println(count(arr, m, n)); 
    } 
}
