//print nodes in level order but nodes should be from left and right side alternatively. Here 1st and 2nd levels are trivial.
While 3rd level: 4(left), 7(right), 5(left), 6(right) are printed.
While 4th level: 8(left), 15(right), 9(left), 14(right), .. are printed.
While 5th level: 16(left), 31(right), 17(left), 30(right), .. are printed

package mayank.BinaryTree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class PerfectBinaryTreeSpecificLevelOrder {
	static class Node  
	{ 
	    int data; 
	    Node left, right; 
	  
	    public Node(int data)  
	    { 
	        this.data = data; 
	        left = right = null; 
	    } 
	} 
	    Node root; 
	  
	    void printSpecificLevelOrderUtil(Node root, Stack<Node> s)  
	    { 
	        if (root == null) 
	            return; 
	  
	        Queue<Node> q = new LinkedList<Node>(); 
	  
	        q.add(root.left); 
	        q.add(root.right); 
	  
	        Node first = null, second = null; 
	  
	        // traversal loop 
	        while (!q.isEmpty())  
	        { 
	            first =  q.poll();  
	           
	            second = q.poll(); 
	  
	            s.push(second.left); 
	            s.push(first.right); 
	            s.push(second.right); 
	            s.push(first.left); 
	  
	            if (first.left.left != null)  
	            { 
	                q.add(first.right); 
	                q.add(second.left); 
	                q.add(first.left); 
	                q.add(second.right); 
	            } 
	        } 
	    } 
	    void printSpecificLevelOrder(Node root)  
	    { 
	        Stack<Node> s = new Stack<Node>(); 
	  
	        s.push(root); 
	  
	        if (root.left != null)  
	        { 
	            s.push(root.right); 
	            s.push(root.left); 
	        } 
	        if (root.left.left != null) 
	            printSpecificLevelOrderUtil(root, s); 
	  
	        while (!s.empty())  
	        { 
	            System.out.print(s.peek().data + " "); 
	            s.pop(); 
	        } 
	    } 
	  
	    public static void main(String[] args)  
	    { 
	        PerfectBinaryTreeSpecificLevelOrder tree = new  PerfectBinaryTreeSpecificLevelOrder(); 
	        tree.root = new Node(1); 
	        tree.root.left = new Node(2); 
	        tree.root.right = new Node(3); 
	  
	        /*  tree.root.left.left  = new Node(4); 
	        tree.root.left.right = new Node(5); 
	        tree.root.right.left  = new Node(6); 
	        tree.root.right.right = new Node(7); 
	   
	        tree.root.left.left.left  = new Node(8); 
	        tree.root.left.left.right  = new Node(9); 
	        tree.root.left.right.left  = new Node(10); 
	        tree.root.left.right.right  = new Node(11); 
	        tree.root.right.left.left  = new Node(12); 
	        tree.root.right.left.right  = new Node(13); 
	        tree.root.right.right.left  = new Node(14); 
	        tree.root.right.right.right  = new Node(15); 
	   
	        tree.root.left.left.left.left  = new Node(16); 
	        tree.root.left.left.left.right  = new Node(17); 
	        tree.root.left.left.right.left  = new Node(18); 
	        tree.root.left.left.right.right  = new Node(19); 
	        tree.root.left.right.left.left  = new Node(20); 
	        tree.root.left.right.left.right  = new Node(21); 
	        tree.root.left.right.right.left  = new Node(22); 
	        tree.root.left.right.right.right  = new Node(23); 
	        tree.root.right.left.left.left  = new Node(24); 
	        tree.root.right.left.left.right  = new Node(25); 
	        tree.root.right.left.right.left  = new Node(26); 
	        tree.root.right.left.right.right  = new Node(27); 
	        tree.root.right.right.left.left  = new Node(28); 
	        tree.root.right.right.left.right  = new Node(29); 
	        tree.root.right.right.right.left  = new Node(30); 
	        tree.root.right.right.right.right  = new Node(31); 
	         */
	        System.out.println("Specific Level Order Traversal "
	                + "of Binary Tree is "); 
	        tree.printSpecificLevelOrder(tree.root); 
	    } 
}
