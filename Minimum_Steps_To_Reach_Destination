Given a number line from -infinity to +infinity. You start at 0 and can go either to the left or to the right.
The condition is that in iâ€™th move, you take i steps.
a) Find if you can reach a given number x
b) Find the most optimal way to reach a given number x, if we can indeed reach it. 
For example, 3 can be reached in 2 steps, (0, 1) (1, 3) and 4 can be reached in 3 steps (0, -1), (-1, 1) (1, 4).

package mayank.Array;
import java.io.*; 	

public class MinimumStepsToReachDestination {

	static int reachTarget(int target) 
    { 
        target = Math.abs(target); 
          
        int sum = 0, step = 0; 
          
        while (sum < target || (sum - target) % 2 != 0) { 
            step++; 
            sum += step; 
        } 
        return step; 
    } 
      
    // Driver code 
    public static void main(String args[]) 
    { 
       int target = 5; 
       System.out.println(reachTarget(target)); 
    }  

}
