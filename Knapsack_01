Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items 
respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that
sum of the weights of this subset is smaller than or equal to W.
You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).

for ex - val = [60.100,120]
         weight = [10,20,30]
         W = 50
         
         o/p = 220
      description -   weight of 30 is 120 and 20 is 100 , 30 + 20 = 50 and max sum of 30,20, is 220

package mayank.Array.dp;

public class Knapsack01 {

	
	static int max(int a,int b) {
		return  (a > b) ? a  : b;
	}
	static int knapsack(int W , int wt[],int val[] , int n){
		
		if(n==0 || W==0) 
			return 0;
		
		if(wt[n-1] > W) {
		return knapsack (W , wt, val ,n-1);
		}
		
		 else return max ( val[n-1] + knapsack(W-wt[n-1], wt, val, n-1),
                 knapsack(W, wt, val, n-1)
                  );
		}
	
	static int knapSack(int W, int wt[], int val[], int n) 
    { 
         int i, w; 
     int K[][] = new int[n+1][W+1]; 
       
     // Build table K[][] in bottom up manner 
     for (i = 0; i <= n; i++) 
     { 
         for (w = 0; w <= W; w++) 
         { 
             if (i==0 || w==0) 
                  K[i][w] = 0; 
             else if (wt[i-1] <= w) 
                   K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]); 
             else
                   K[i][w] = K[i-1][w]; 
         } 
      } 
       
      return K[n][W]; 
    } 
       
	public static void main(String[] args) {
		int val[] = new int[]{60, 100, 120, 80};
        int wt[] = new int[]{10, 20, 30,20};
    int  W = 50;
    int n = val.length;
    System.out.println(knapsack(W, wt, val, n));
    System.out.println(knapSack(W, wt, val, n));
    }
		
}
/*public static void main(String[] args) {
		int arr[] = {1,2,3,4,5,5};
		int wt[] = {10,30,50,40,80,80};
		int sum = 10;
		int k=0,res = 0,num=0;
		int m=0;
		ArrayList<Integer> list = new ArrayList<Integer>();
		List<List<Integer>> list2 = new ArrayList<List<Integer>>();
		ArrayList<Integer> list3 = new ArrayList<Integer>();
		List<List<Integer>> list4 = new ArrayList<List<Integer>>();
		
		
		while(m!=arr.length) {
		if(m>0) {
			num++;
		}
		while(k!=arr.length) {
			res = arr[num];
			list.add(res);
			list3.add(num);
			for(int i=k+1;i<arr.length;i++) {
				res = res + arr[i];
				
				if(res < sum) {
					list.add(arr[i]);
					list3.add(i);
				}
				if(res > sum) {
					res = res - arr[i];
					res = res - arr[i-1];
					res = res + arr[i];
					if(res == sum) {
						list.remove(list.size()-1);
						list.add(arr[i]);
						list3.remove(list3.size()-1);
						list3.add(i);
						if(!list2.contains(list)) {
							list2.add(list);
						}
						if(!list4.contains(list3)) {
							list4.add(list3);
						}
						list = new ArrayList<>();
						list3 = new ArrayList<>();
						break;
					}
				}
				if(res == sum) {
					list.add(arr[i]);
					if(!list2.contains(list)) {
						list2.add(list);
						list3.add(i);
					}
					if(!list4.contains(list3)) {
						list4.add(list3);
					}
					list = new ArrayList<>();
					list3 = new ArrayList<>();
					break;
			}
		}k++;
		list = new ArrayList<>();
		list3 = new ArrayList<>();
	}m++;
	k=m;
		}System.out.println(list2);
		System.out.println(list4);
		int max = 0;
		int maxValue =0 ;
		int count = 0;
		List c;
		for(List a :list4) {
			
			for(int i=0;i<a.size();i++) {
				int index = (int) a.get(i);
				max = max + wt[index];
			}
			if(max > maxValue) {
				maxValue = max;
				count++;
		}max =0;
		}System.out.println();
		System.out.println("max value is "+maxValue);
		System.out.println("sum combination "+list2.get(count));
	}
	
	
	*/

