package mayank.String;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class WordLadder {
	public static void main(String[] args) {
		HashSet<String> dict = new HashSet<>();
		dict.add("hit");
		dict.add("hot");
		dict.add("dot");
		dict.add("dog");
		dict.add("lot");
		dict.add("log");
		dict.add("cog");
		System.out.println(getShortestPath("hit", "cog", dict));
	}

	private static int getShortestPath(String source, String target, HashSet<String>strings) {		
        Queue<String> q = new LinkedList<>();
        q.add(source);
        int count = 1;
        strings.remove(source);
        System.out.println(source);
        while(!q.isEmpty())
        {
        	String current = q.remove();
        	for(Iterator<String> it = strings.iterator(); it.hasNext() ;)
        	{
        		String s = it.next();
        		if(isAdjacent(current , s))
        		{
        			System.out.println(s);
        			count++;
        			q.add(s);      
        			if(s == target)
        				return count;
        			it.remove();
        			break;
        		}
        	}
        }
        
		return 0;
	}

	private static boolean isAdjacent(String s1, String s2) {
		char c1[] = s1.toCharArray();
		char c2[] = s2.toCharArray();
		int count = 0;
		for(int i = 0 ; i < s1.length() ; i++)
		{
			if(c1[i] != c2[i])
				count++;	
		}
		if(count == 1)
			return true;
		else
			return false;
	}
}
