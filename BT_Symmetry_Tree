/**
 * 
 */
package mayank.BinaryTree;

import java.util.LinkedList;
import java.util.Queue;

/**
 * @author Mayank
 *
 */
public class SymmetryTree {
	    Node root; 
	    static class Node 
	    { 
	        int val; 
	        Node left, right; 
	        Node(int v) 
	        { 
	            val = v; 
	            left = null; 
	            right = null; 
	        } 
	    } 
	    public boolean isSymmetric(Node root) 
	    { 
	        Queue<Node> q = new LinkedList<Node>(); 
	  
	        q.add(root.left); 
	        q.add(root.right); 
	  
	        while (!q.isEmpty()) 
	        { 
	            Node tempLeft = q.remove(); 
	            Node tempRight = q.remove(); 
	            if (tempLeft==null && tempRight==null) 
	                continue; 
	  
	            if ((tempLeft==null && tempRight!=null) || (tempLeft!=null && tempRight==null)) 
	                return false; 
	  
	            if (tempLeft.val != tempRight.val) 
	                return false;
	            
	            q.add(tempLeft.left); 
	            q.add(tempRight.right); 
	            q.add(tempLeft.right); 
	            q.add(tempRight.left); 
	        } 
	        return true; 
	    } 
	  
	    public static void main(String[] args) 
	    { 
	    	 SymmetryTree bt = new SymmetryTree();
	        bt.root = new Node(1); 
	        bt.root.left = new Node(2); 
	        bt.root.right = new Node(2); 
	        bt.root.left.left = new Node(3); 
	        bt.root.left.right = new Node(4); 
	        bt.root.right.left = new Node(4); 
	        bt.root.right.right = new Node(3); 
	  
	        if (bt.isSymmetric(bt.root)) 
	            System.out.println("The given tree is Symmetric"); 
	        else
	            System.out.println("The given tree is not Symmetric"); 
	    }
}
