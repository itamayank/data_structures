package mayank.BinaryTree;

public class ConvertBinaryTreeToDLL {
	Node root,head;
	static class Node  
	{ 
	    int data; 
	    Node left, right; 
	  
	    public Node(int data)  
	    { 
	        this.data = data; 
	        left = right = null; 
	    } 
	} 
	 static Node prev = null; 
	   
	    void BinaryTree2DoubleLinkedList(Node root)  
	    { 
	        if (root == null) 
	            return;                             //inorder traversal and keep track of previously visited node say-prev
	   
	        BinaryTree2DoubleLinkedList(root.left); 
	   
	        if (prev == null)  
	            head = root; 
	        else
	        { 
	            root.left = prev; 
	            prev.right = root; 
	        } 
	        prev = root; 
	   
	        BinaryTree2DoubleLinkedList(root.right); 
	    }
	    
	    
	    void BToDLL(Node root)  
	    { 
	        if (root == null) 
	            return; 
	  
	        BToDLL(root.right); 
	  
	        root.right = head; 
	       
	        if (head != null) 
	            (head).left = root; 
	  
	        head = root; 
	  
	        BToDLL(root.left); 
	    } 
	  
	    void printList(Node head)  
	    { 
	        System.out.println("Extracted Double Linked List is : "); 
	        while (head != null)  
	        { 
	            System.out.print(head.data + " "); 
	            head = head.right; 
	        } 
	    } 
	  
	    public static void main(String[] args)  
	    { 
	        /* Constructing below tree 
	               5 
	             /   \ 
	            3     6 
	           / \     \ 
	          1   4     8 
	         / \       / \ 
	        0   2     7   9  */
	          
	    	ConvertBinaryTreeToDLL tree = new ConvertBinaryTreeToDLL(); 
	        tree.root = new Node(5); 
	        tree.root.left = new Node(3); 
	        tree.root.right = new Node(6); 
	        tree.root.left.right = new Node(4); 
	        tree.root.left.left = new Node(1); 
	        tree.root.right.right = new Node(8); 
	        tree.root.left.left.right = new Node(2); 
	        tree.root.left.left.left = new Node(0); 
	        tree.root.right.right.left = new Node(7); 
	        tree.root.right.right.right = new Node(9); 
	  
	        tree.BToDLL(tree.root); 
	        tree.printList(tree.head); 
	        System.out.println();
	        //tree.BinaryTree2DoubleLinkedList(tree.root);               //run one method at a time
	        //tree.printList(tree.head);
	    } 
}
