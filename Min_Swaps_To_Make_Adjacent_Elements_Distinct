package mayank.Array;

import java.util.Comparator;
import java.util.PriorityQueue;

class KeyComparator implements Comparator<Key> {

	public int compare(Key k1, Key k2) {
		if (k1.freq < k2.freq)
			return 1;
		else if (k1.freq > k2.freq)
			return -1;
		return 0;
	}
}

class Key {
	int freq; 
	int num;

	Key(int freq, int num) {
		this.freq = freq;
		this.num = num;
	}
}

public class MinSwapsToMakeAdajacentElementsUnique {

	static void rearrangeArray(int[] arr) {
		int n = arr.length;

		int[] count = new int[10000];
		int visited[] = new int[10000];

		for (int i = 0; i < n; i++)
			count[arr[i]]++;

		PriorityQueue<Key> pq = new PriorityQueue<>(new KeyComparator());

		for (int i = 0; i < n; i++) {
			int val = arr[i];

			if (count[val] > 0 && visited[val] != 1) {
				pq.add(new Key(count[val], val));
			}
			visited[val] = 1;
		}

		int result[] = new int[n];

		Key prev = new Key(-1, -1);

		int l = 0;
		
		while (pq.size() != 0) {

			Key k = pq.poll();
			result[l] = k.num;

			if (prev.freq > 0)
				pq.add(prev);

			(k.freq)--;
			prev = k;
			l++;
		}

		if (n != result.length) {
			System.out.println(" Not valid Array ");
		} else {
			for (int i : result) {
				System.out.print(i + " ");
			}
		}
	}

	
	public static void main(String[] args) {
		int arr[] = { 1, 2, 2, 3, 3, 4, 3 };
		int arr2[] = { 1, 2, 2, 3, 3, 4, 3 };
		rearrangeArray(arr);

	}
}
