Given an array of integers and a sum, the task is to print all subsets of given array with sum equal to given sum.
ex-
Input : arr[] = {2, 3, 5, 6, 8, 10}
        sum = 10
Output : 5 2 3
         2 8
         10

package mayank.Array.dp;

import java.util.ArrayList;
import java.util.List;

public class PerfectSumProblem {
	

	    static boolean[][] dp; 
	       
	    static void display(ArrayList<Integer> v) 
	    { 
	       System.out.println(v); 
	    } 
	       
	static void printSubsetsRec(int arr[], int i, int sum, ArrayList<Integer> p) {
	    //if we reach end
		if (i == 0 && sum != 0 && dp[0][sum]) {
			p.add(arr[i]);
			display(p);
			p.clear();
			return;
		}

		// if sum = 0
		if (i == 0 && sum == 0) {
			display(p);
			p.clear();
			return;
		}

		//ignoring current element
		if (dp[i - 1][sum]) {
			ArrayList<Integer> b = new ArrayList<>();
			b.addAll(p);
			printSubsetsRec(arr, i - 1, sum, b);
		}
		
		//considering current element 
		if (sum >= arr[i] && dp[i - 1][sum - arr[i]]) {
			p.add(arr[i]);
			printSubsetsRec(arr, i - 1, sum - arr[i], p);
		}
	} 
	       
	    static void printAllSubsets(int arr[], int n, int sum) 
	    { 
	        if (n == 0 || sum < 0) 
	           return; 
	       
	        dp = new boolean[n][sum + 1]; 
	      
	        for (int i=0; i<n; ++i) 
	        { 
	            dp[i][0] = true;   
	        } 
	       
	        if (arr[0] <= sum) 
	           dp[0][arr[0]] = true; 
	       
	        for (int i = 1; i < n; ++i) 
	            for (int j = 0; j < sum + 1; ++j) {
	            	if(arr[i]<= j) {
	            		dp[i][j] = (dp[i-1][j] || dp[i-1][j-arr[i]]); 
	            	}else {
	            		dp[i][j] = dp[i - 1][j]; 
	            	}
	            }
	        if (dp[n-1][sum] == false) 
	        { 
	            System.out.println("There are no subsets with" +  
	                                                  " sum "+ sum); 
	            return; 
	        } 
	       
	        ArrayList<Integer> p = new ArrayList<>(); 
	        printSubsetsRec(arr, n-1, sum, p); 
	    } 
	    public static void main(String args[]) 
	    { 
	        int arr[] = {1, 2, 3, 4, 5}; 
	        int n = arr.length; 
	        int sum = 10; 
	        printAllSubsets(arr, n, sum); 
	    } 
	}
	
	/*public static void main(String[] args) {
		int arr[] = {1,1,1,1,1,1,1,2,3,4,5,5};
		int sum = 10,finalSum =0;
		int k=0,res = 0,num=0;
		int m=0;
		ArrayList<Integer> list = new ArrayList<Integer>();
		List<List<Integer>> list2 = new ArrayList<List<Integer>>();
		
		
		while(m!=arr.length) {
		if(m>0) {
			num++;
		}
		while(k!=arr.length) {
			res = arr[num];
			list.add(res);
			for(int i=k+1;i<arr.length;i++) {
				res = res + arr[i];
				finalSum = res;
				if(res < sum) {
					list.add(arr[i]);
				}
				if(res > sum) {
					res = res - arr[i];
					res = res - arr[i-1];
					res = res + arr[i];
					if(res == sum) {
						list.remove(list.size()-1);
						list.add(arr[i]);
						if(!list2.contains(list)) {
							list2.add(list);
						}
						list = new ArrayList<>();
						break;
					}else {
						res = finalSum;
						res = res - arr[i];
					}
				}
				if(res == sum) {
					list.add(arr[i]);
					if(!list2.contains(list)) {
						list2.add(list);
					}
					list = new ArrayList<>();
					break;
			}
		}k++;
		list = new ArrayList<>();
	}m++;
	k=m;
		}System.out.println(list2);
	}
	*/
	/*public static void main(String[] args) {
		
		//int arr[] = {1,1,1,1,1,2,3,4};
		//int arr[] = {1,1,1,1,1,1,1,1,1,1,5,5,7,6,2,3,4};
		 int arr[] = {1, 2, 3, 4, 5}; 
		//int arr[] = {50,50,20,20,10,25,25};
		//int arr[] = {25,25,50,50};
		//int sum = 5;
		//int sum = 100;
		//int sum = 100;
		int sum = 10;
		int res = 0;
		int k = 0;
		int m =0;
		int num = 0;
		int finalSum =0;
		List<Integer> list = new ArrayList<Integer>();
		List<List<Integer>> list2 = new ArrayList<List<Integer>>();
		
		while((arr.length)!=m){
			k = m;
			if(m>0){
				num++;
			}
		while((arr.length)!=k){
			list = new ArrayList<Integer>();
			res = arr[num];
			list.add(arr[num]);
			for(int i=k+1;i<arr.length;i++){
				res += arr[i];
				if(res > sum){
					if(res - arr[i-1] == sum){
						list.remove(list.size()-1);
						list.add(arr[i]);
						
						for(int j = 0; j<list.size();j++){
							finalSum += list.get(j);
							}
						  if(finalSum == sum){
							  if(!list2.contains(list)){
							    list2.add(list);
							  }
							}
						list = new ArrayList<Integer>();
						res = 0 ;
						break;
					}
					res = res - arr[i];
				}else{
					list.add(arr[i]);
				}
				if(res == sum){
					 if(!list2.contains(list)){
						  list2.add(list);
					 }
					list = new ArrayList<Integer>();
					res = 0 ;
				}
			} k++;
		}m++;
	    	}
	    		for(int j = 0; j<list2.size();j++){
				System.out.print(list2.get(j)+" ");
			    System.out.println();
	    				}
		}
		*/
		
		
			/*static int highestPowerof2(int n) 
			   { 
			     int res = 0; 
			     for (int i = n; i >= 1; i--) 
			        { 
			          if ((i & (i - 1)) == 0)                   // highest power of two
			             { 
			                  res = i; 
			                break; 
			             } 
			        } 
			     return res; 
			   } 
			   public static void main(String[] args) 
			   { 
			      int n = 10; 
			      System.out.println(highestPowerof2(n)); 
			   }

	 /*static Integer [] arr = {1,1,1,1,1,2,3,4};
	    static List<Integer> arrFinalList = null;
	    static List<Integer> newList =null;
	    static Set<List<Integer>> test=new HashSet<List<Integer>>();
	    
	    public static void main(String[] args) {
	        arrFinalList = new ArrayList<Integer>(Arrays.asList(arr));
	       makeSum(new ArrayList<Integer>(Arrays.asList(arr)),new ArrayList<Integer>());
	       for(List<Integer> lt:test)
	           System.out.println(lt);
	    }
	    
	    private static void makeSum(List<Integer> numbers,List<Integer> arrList) {
	        int num =5;
	        int finalNum=0;
	        
	        for(int k :arrList){
	            finalNum=finalNum+k;
	        }
	        if(finalNum==num){
	            Collections.sort(arrList);
	            test.add(arrList);
	           // System.out.println(arrList);
	        }
	        for(int i =0;i<numbers.size();i++){
	            if(finalNum>=num){
	                continue;
	            }
	            List<Integer> finalElementList = new ArrayList<Integer>();
	            newList = new ArrayList<Integer>(arrList);
	            for(int j =i+1;j<numbers.size();j++)
	            {
	               finalElementList.add(numbers.get(j));
	            }
	            newList.add(numbers.get(i));
	            makeSum(finalElementList,newList);
	        }
	    }*/
